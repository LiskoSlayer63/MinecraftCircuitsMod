package com.circuits.circuitsmod.recorder;

import java.io.Serializable;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Stream;

import com.circuits.circuitsmod.Config;
import com.circuits.circuitsmod.common.BusData;
import com.circuits.circuitsmod.generators.GeneratorUtils;

/**
 * Stores the results of "recording" an unknown circuit within a testing frame
 * @author bubble-07
 *
 */
public class CircuitRecording implements Serializable {
	private static final long serialVersionUID = 1L;
	
	private HashMap<List<BusData>, List<BusData>> recorded = new HashMap<>();
	private long currentRecordingIndex = 0;
	private long totalEntries;
	private int[] inputWidths;
	private int[] outputWidths;
	
	private CircuitRecording(int[] inputWidths, int[] outputWidths) {
		this.inputWidths = inputWidths;
		this.totalEntries = GeneratorUtils.getProductSize(inputWidths);
		this.outputWidths = outputWidths;
	}
	
	public static Optional<CircuitRecording> initCircuitRecording(int[] inputWidths, int[] outputWidths) {
		long totalEntries = GeneratorUtils.getProductSize(inputWidths);
		if (totalEntries > Config.maxCircuitRecordingEntries) {
			return Optional.empty();
		}
		return Optional.of(new CircuitRecording(inputWidths, outputWidths));
	}
	
	public List<BusData> currentInputCase() {
		return GeneratorUtils.busLongs(GeneratorUtils.partitionLong(currentRecordingIndex, inputWidths), inputWidths);
	}
	public void recordResult(List<BusData> output) {
		recorded.put(currentInputCase(), output);
		currentRecordingIndex++;
	}
	public boolean stillRecording() {
		return this.currentRecordingIndex < totalEntries;
	}
	
	public int getNumEntries() {
		return (int) this.totalEntries;
	}
	
	
	public int[] getInputWidths() {
		return this.inputWidths;
	}
	public int[] getOutputWidths() {
		return this.outputWidths;
	}
	
	public HashMap<List<BusData>, List<BusData>> getRecorded() {
		return this.recorded;
	}
	
	public String toTableDisplayString() {
		String result = "";
		for (Map.Entry<List<BusData>, List<BusData>> entry : getRecorded().entrySet()) {
			result += BusData.listToDispString(entry.getKey()) + " -> " + BusData.listToDispString(entry.getValue()) + "\n";
		}
		return result;
	}
	
	
	
	private static String tab(String in) {
		return Stream.of(in.split("\n")).map((s) -> "    " + s).reduce((s1, s2) -> s1 + s2).orElse("");
	}
	private static String printArray(int[] arr) {
		return "{" + Arrays.toString(arr).substring(1, arr.length - 1) + "}";
	}
	
	public String toJavaSource() {
		String result = "public class Implementation { \n";
		String body = "";
		body += "public int[] inputWidths() { \n" 
				+ tab("return new int[]" + printArray(inputWidths)) + ";\n"
				+ "} \n";
		body += "public int[] outputWidths() { \n"
				+ tab("return new int[]" + printArray(outputWidths)) + ";\n"
				+ "} \n\n";
		
		for (int i = 0; i < outputWidths.length; i++) {
			body += "long output" + i + ";\n";
			body += "public long value" + i + " {\n"
					+ tab("return output" + i + ";\n")
				    + "}\n";
		}
		
		body += "public void tick(long input0";
		for (int i = 1; i < inputWidths.length; i++) {
			body += ", long input" + i;
		}
		body += ") { \n";
		
		//The generated code here is incredibly inelegant, but given that this is autogenerated,
		//there should be no assumption of elegance to begin with
		String tickBody = "";
		for (Map.Entry<List<BusData>, List<BusData>> entry : getRecorded().entrySet()) {
			long[] key = entry.getKey().stream().mapToLong(BusData::getData).toArray();
			long[] value = entry.getKey().stream().mapToLong(BusData::getData).toArray();
			tickBody += "if (true";
			for (int i = 0; i < key.length; i++) {
				tickBody += " && input" + i + " == " + key[i];
			}
			tickBody += ") { \n";
			
			String caseBody = "";
			for (int i = 0; i < value.length; i++) {
				caseBody += "output" + i + " = " + value[i] + ";\n";
			}
			tickBody += tab(caseBody);
			
			tickBody += "} \n";
		}
		
		body += tab(tickBody);
		
		body += " } \n";
		
		result += tab(body);
		
		result += "}\n";
		
		return result;
	}
	

}
